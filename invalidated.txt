"import sys
import datetime
import logging
MSG_FORMAT = '%(asctime)s %(levelname)s %(name)s: %(message)s'
DATETIME_FORMAT = '%Y-%m-%d %H:%M:%S'
logging.basicConfig(format=MSG_FORMAT, datefmt=DATETIME_FORMAT)
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

env                = dbutils.widgets.get('env')
catalog            = dbutils.widgets.get('catalog')
cap_rpt_schema     = dbutils.widgets.get('cap_rpt_schema') 

class CAPSchemaUtilis(object):
    """"""main Class""""""
    def __init__(self):
        """"""
        Constructor for the class `CAPSchemaUtilis`
        """"""
        self.env = env
           
    def invalidate_biometric_data(self):
        try:
            #query = """"""INVALIDATE METADATA {catalog}.{cap_rpt_schema}.ccw_biometric_data""""""
            query = """"""REFRESH TABLE {catalog}.{cap_rpt_schema}.ccw_biometric_data""""""
            query = query.format(catalog=catalog, \
                                cap_rpt_schema=cap_rpt_schema
                                )  
            result = spark.sql(query)
            logger.info('insert overwrite result ==> ' + result.__str__())
                 
        except Exception as error:
           msg='invalidate_biometric_data error '+'=>'+'acct_grp_clncl_mv'
           logger.error('invalidate_biometric_data Exception for ==>\n' + msg.__str__())
           logger.error('invalidate_biometric_data Exception for ==>\n' + error.__str__())
           sys.exit(1)           

def main():
    """"""Main Function""""""
    logger.info('Job Start Time ==> '+datetime.datetime.now().__str__())
    ext_utils = CAPSchemaUtilis()
    ext_utils.invalidate_biometric_data()
    logger.info('Job End Time ==> '+datetime.datetime.now().__str__())

main()"